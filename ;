import base64
import io
from pathlib import Path as P
from pathlib import PurePath as PP
from deconvolveRapidscan import sindrive, GAMMA
from simulateRapidscan import Bloch

import dash
import diskcache
import numpy as np
import pandas as pd
import plotly.express as px
from dash import dcc, html
from dash.dependencies import Input, Output, State
from dash.exceptions import PreventUpdate
from joblib import Memory, Parallel, delayed
from plotly import graph_objects as go
from plotly.offline import iplot
from scipy.optimize import curve_fit as cf
from scipy.signal import hilbert, sawtooth, windows

from cycle import cycle

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']
app = dash.Dash(__name__,
                external_stylesheets=external_stylesheets,
                prevent_initial_callbacks=True,
                )
app.title = 'Deconvolution'
app._favicon = 'assets/favicon.ico'
theme = {
    'dark': True,
    'detail': '#007439',
    'primary': '#00EA64',
    'secondary': '#6E6E6E',
}

graph_height = '325px'
margin_vert = '0px'
margin = dict(l=20, r=20, t=20, b=20)


def is_int(val):
    try:
        int(val)

        return True
    except ValueError:
        return False


def make_fig():
    fig = px.line()
    fig.update_layout(margin=margin)

    return fig

fig = make_fig()

"""
Don't think I will need Bphase with how the triggering
currently works, should be fixed on -np.pi/2
"""
@app.callback(
        Output('bphase', 'disabled'),
        Input('init', 'figure'),
        prevent_initial_call=False
        )
def disable(_):
    return True


# @app.callback(
#         Output('sigphase', 'value'),
#         Input('addpi', 'n_clicks'),
#         State('sigphase', 'value'),
#         prevent_initial_call=True
#         )
# def addpi(_, sigphase):
#     if sigphase // (2 * np.pi) > 0:
#         sigphase -= (sigphase // (2 * np.pi) ) * (2 * np.pi)

#     sigphase += np.pi/2
#     return sigphase
@app.callback(
    Output('fit', 'figure'),
    Output('fitdata', 'data'),
    Output('fit_params', 'children'),
    Input('fitbutton', 'n_clicks'),
    State('file', 'data'),
    State('coil', 'value'),
    State('amp', 'value'),
    State('freq', 'value'),
    State('bphase', 'value'),
    prevent_initial_call=True
        )
def fit(_, datajson, coil, amplitude, freq, bphase):
    fitd = pd.DataFrame()
    # try:
    if True:
        data = pd.read_json(datajson, orient='split')
        t = data['time'].to_numpy()
        y = data[' Y[0]'].to_numpy()
        def Fp(t, T2, dB, phase):
            t, sol, omega = Bloch(1e-3, T2, dB, 70e3, amplitude * coil / 2, t=t, Bphase=bphase, phase=phase)
            o = sol.y[0] + 1j * sol.y[1]
            return np.abs(o) / np.max(np.abs(o))
        p0 = [200e-9, -15, -1/16 * np.pi]
        popt, pcov = cf(Fp, t, y, p0=p0)
        fitd['time'] = t
        fitd['raw'] = y
        fitd['fit'] = Fp(t, *popt)
        fig = px.line(fitd, x='time', y=['raw', 'fit'])
        fig.update_layout(margin=margin)
        return fig, fitd.to_json(orient='split'), f'{popt}'
    # except:
    #     return make_fig(), fitd.to_json(orient='split'), html.Div(f"Fitting error",
    #                         style={'color': 'red'
    #                                })


@app.callback(
    Output('deconvolved', 'figure'),
    Output('decon', 'data'),
    Input('file', 'data'),
    Input('coil', 'value'),
    Input('amp', 'value'),
    Input('freq', 'value'),
    Input('bphase', 'value'),
    Input('sigphase', 'value'),
    Input('addpi', 'n_clicks')
        )
def decon(datajson, coil, amplitude, freq, bphase, sigphase, n_clicks):
    freq = freq * 1e3
    outd = pd.DataFrame()
    try:

    # if True:
        d = pd.read_json(datajson, orient='split')
        t = d['time'].to_numpy()
        sig = d[' Y[0]'].to_numpy(dtype='complex128')
        
        t -= np.min(t)
        im = -1 * np.imag(hilbert(np.abs(sig)))
        sig += 1j * im

        drive = sindrive(amplitude * coil, freq, t, Bphase=bphase)

        sig -= np.mean(sig)
        sig /= np.max(np.abs(sig))

        r = sig * drive
        n = len(r)
        window = windows.blackman(len(r))

        M = np.fft.fftshift(np.fft.fft(r * window, n=n))
        Phi = np.fft.fftshift(np.fft.fft(drive, n=n))
        f = np.fft.fftshift(np.fft.fftfreq(n, t[1] - t[0]))
        B = -f * 2 * np.pi / GAMMA

        res = M/Phi
        res *= np.exp(1j * (sigphase + n_clicks * (np.pi/2)))

        outd['B'] = B[np.abs(B)<1/2*amplitude*coil]
        outd['abs'] = np.real(res)[np.abs(B)<1/2*amplitude*coil]
        outd['disp'] = np.imag(res)[np.abs(B)<1/2*amplitude*coil]
        # outd['B'] = B
        # outd['abs'] = np.real(res)
        # outd['disp'] = np.imag(res)
        # outd = {'B': t, 'abs': np.real(sigo), 'disp': np.real(sigo)}
        # outd = pd.DataFrame(outd)

        fig = px.line(outd, x='B', y=['abs', 'disp'])
        fig.update_xaxes(range=[-1/2*amplitude*coil, 1/2*amplitude*coil])
        fig.update_layout(margin=margin)

        return fig, outd.to_json(orient='split')
    except: # general error handling
        return make_fig(), outd.to_json(orient='split')


@app.callback(
    Output('fileout', 'children'),
    Output('init', 'figure'),
    Output('file', 'data'),
    Input('filepath', 'value'),
    prevent_initial_call=False)
def parse_contents(filepath):
    d = pd.DataFrame()
    try:
            d = pd.read_csv(filepath, skiprows=4)
            t = np.linspace(0, 2e-9 * len(d['time']), len(d['time']))
            d['time'] = t
            dat = d[' Y[0]'].to_numpy()

            fig = px.line(d, x='time', y=' Y[0]')
            fig.update_layout(margin=margin)

            h = html.Div(f"Loaded {P(filepath).name}",
                            style={'color': 'green'
                                   })
    except (FileExistsError, FileNotFoundError):
    # except TypeError:
        if filepath in ['/', '']:
            h = html.Div(['Enter file above'])
        elif P(filepath).is_file():
            h = html.Div('Wrong file extension -- choose .dat',
                         style={'color': 'red'})
        else:
            h = html.Div('File does not exist', style={'color': 'red'})

        fig = make_fig()
    except OSError:
    # except TypeError:
        h = html.Div('Filename too long', style={'color': 'red'})

        fig = make_fig()

    return h, fig, d.to_json(orient='split')


app.layout = html.Div(
    [
        html.Div(
            [
                dcc.Graph(
                    id='init', figure=fig, style={'height': graph_height})
            ],
            style={
                'display': 'inline-block',
                'width': '49%',
                'horizontal-align': 'middle'
            }),
        html.Div(
            [
                dcc.Graph(
                    id='fit', figure=fig, style={'height': graph_height})
            ],
            style={
                'display': 'inline-block',
                'width': '49%',
                'horizontal-align': 'middle'
            }),
        html.Div([
        html.Div([
            html.Div([
                "Coil (G/mA):",
            ], style={
                'display': 'inline-block',
                'margin': '10px 0px 0px 30px',
                'width': '120px'
                }),
            html.Div(
                [
                    dcc.Slider(
                        0.20,
                        0.70,
                        id='coil',
                        value=0.57,
                        marks=None,
                        tooltip={
                            "placement": "right",
                            "always_visible": True
                        },
                    )
                ],
                style={
                    'width': '70%',
                    'display': 'inline-block',
                    'margin': '0px 0px -25px 0px'
                },
            ),
            ],),
        html.Div([
            html.Div([
                "Amplitude (mA)",
            ], style={
                'display': 'inline-block',
                'margin': '10px 0px 0px 30px',
                'width': '120px'
                }),
            html.Div(
                [
                    dcc.Slider(
                        50,
                        200,
                        id='amp',
                        value=156,
                        marks=None,
                        tooltip={
                            "placement": "right",
                            "always_visible": True
                        },
                    )
                ],
                style={
                    'width': '70%',
                    'display': 'inline-block',
                    'margin': '0px 0px -25px 0px'
                },
            ),
        ]),
        html.Div([
            html.Div([
                "Frequency (kHz)",
            ], style={
                'display': 'inline-block',
                'margin': '10px 0px 0px 30px',
                'width': '120px'
                }),
            html.Div(
                [
                    dcc.Slider(
                        20,
                        100,
                        id='freq',
                        value=70,
                        marks=None,
                        tooltip={
                            "placement": "right",
                            "always_visible": True
                        },
                    )
                ],
                style={
                    'width': '70%',
                    'display': 'inline-block',
                    'margin': '0px 0px -25px 0px'
                },
            ),
        ]),
        html.Div([
            html.Div([
                "B \u1D60 (rad):",
            ], style={
                'display': 'inline-block',
                'margin': '10px 0px 0px 30px',
                'width': '120px'
                }),
            html.Div(
                [
                    dcc.Slider(
                        -3/4*np.pi,
                        -1/4*np.pi,
                        id='bphase',
                        value=-1/2*np.pi,
                        marks=None,
                        tooltip={
                            "placement": "right",
                            "always_visible": True
                        },
                    )
                ],
                style={
                    'width': '70%',
                    'display': 'inline-block',
                    'margin': '0px 0px -25px 0px'
                },
            ),
        ]),
        html.Div([
            html.Div([
                "Signal \u1d60 (rad):",
            ], style={
                'display': 'inline-block',
                'margin': '10px 0px 0px 30px',
                'width': '120px'
                }),
            html.Div(
                [
                    dcc.Slider(
                        0,
                        np.pi/2,
                        id='sigphase',
                        value=np.pi/4,
                        marks=None,
                        tooltip={
                            "placement": "right",
                            "always_visible": True
                        },
                    )
                ],
                style={
                    'width': '30%',
                    'display': 'inline-block',
                    'margin': '0px 0px -25px 0px'
                },
            ),
            html.Button(id='addpi',
                        n_clicks=0,
                        children=('+\u03C0/2'),
                        style={
                            'background-color': 'lightblue',
                            'margin': '0px 10px 0px 0px',
                            'display': 'inline-block',
                            'text-align': 'center'
                        }),
            html.Button(id='fitbutton',
                        n_clicks=0,
                        children='Fit',
                        style={
                            'background-color': 'orange',
                            'margin': '0px 0px 0px 0px',
                            'display': 'inline-block',
                            'text-align': 'center'
                        }),
        ]),
        html.Div(
            [
                "Path: ",
                dcc.Input(
                    id='filepath',
                    value='',
                    type='text',
                    style={
                        'width': '78.5%',
                        'height': '50px',
                        # 'lineHeight': '50px',
                        'borderWidth': '1px',
                        'borderStyle': 'line',
                        'borderRadius': '5px',
                        'textAlign': 'left',
                        'margin': '0px 0px 10px 0%'
                    }),
                html.Div(id='fileout', children=''),
                html.Div(id='fit_params', children=''),
            ],
            style={'margin': '10px 0px 0px 30px'}),], style={'width': '49%', 'display':'inline-block', 'verticalAlign': 'top'}),
        html.Div(
            [
                dcc.Graph(
                    id='deconvolved', figure=fig, style={'height': graph_height})
            ],
            style={
                'display': 'inline-block',
                'width': '49%',
                'horizontal-align': 'middle'
            }),
        dcc.Store(id='file'),
        dcc.Store(id='decon'),
        dcc.Store(id='fitdata')
    ],
    style={})

if __name__ == '__main__':
    app.run_server(debug=True, threaded=True, port=1027)
